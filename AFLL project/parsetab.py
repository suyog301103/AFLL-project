
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COLON CONDITIONAL DIVIDE DOLLAR ELIF ELSE EQUAL ID IF LPAREN MINUS NUMBER PLUS POINT RPAREN SEMICOLON STRING THEN TIMES WHILEstatement : assign\n    statement : statement statement\n    statement : if\n    statement : elif\n    statement : elseassign : ID EQUAL expression \n    | ID EQUAL expression POINT expression\n    | ID EQUAL MINUS expression POINT expression\n    | ID EQUAL PLUS expression POINT expressionif : IF LPAREN expression CONDITIONAL expression RPAREN COLONelif : ELIF LPAREN expression CONDITIONAL expression RPAREN COLONelse : ELSE COLONexpression : STRINGexpression : expression PLUS termexpression : expression MINUS termexpression : termterm : term TIMES factorterm : term DIVIDE factorterm : factorfactor : NUMBERfactor : LPAREN expression RPAREN'
    
_lr_action_items = {'ID':([0,1,2,3,4,5,10,14,15,18,19,20,21,35,36,37,40,41,42,45,46,49,50,],[6,6,-1,-3,-4,-5,6,-12,-6,-13,-16,-19,-20,-7,-14,-15,-17,-18,-21,-8,-9,-10,-11,]),'IF':([0,1,2,3,4,5,10,14,15,18,19,20,21,35,36,37,40,41,42,45,46,49,50,],[7,7,-1,-3,-4,-5,7,-12,-6,-13,-16,-19,-20,-7,-14,-15,-17,-18,-21,-8,-9,-10,-11,]),'ELIF':([0,1,2,3,4,5,10,14,15,18,19,20,21,35,36,37,40,41,42,45,46,49,50,],[8,8,-1,-3,-4,-5,8,-12,-6,-13,-16,-19,-20,-7,-14,-15,-17,-18,-21,-8,-9,-10,-11,]),'ELSE':([0,1,2,3,4,5,10,14,15,18,19,20,21,35,36,37,40,41,42,45,46,49,50,],[9,9,-1,-3,-4,-5,9,-12,-6,-13,-16,-19,-20,-7,-14,-15,-17,-18,-21,-8,-9,-10,-11,]),'$end':([1,2,3,4,5,10,14,15,18,19,20,21,35,36,37,40,41,42,45,46,49,50,],[0,-1,-3,-4,-5,-2,-12,-6,-13,-16,-19,-20,-7,-14,-15,-17,-18,-21,-8,-9,-10,-11,]),'EQUAL':([6,],[11,]),'LPAREN':([7,8,11,12,13,16,17,22,25,26,27,30,31,33,34,38,39,],[12,13,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'COLON':([9,47,48,],[14,49,50,]),'MINUS':([11,15,18,19,20,21,23,24,28,29,32,35,36,37,40,41,42,43,44,45,46,],[16,27,-13,-16,-19,-20,27,27,27,27,27,27,-14,-15,-17,-18,-21,27,27,27,27,]),'PLUS':([11,15,18,19,20,21,23,24,28,29,32,35,36,37,40,41,42,43,44,45,46,],[17,26,-13,-16,-19,-20,26,26,26,26,26,26,-14,-15,-17,-18,-21,26,26,26,26,]),'STRING':([11,12,13,16,17,22,25,33,34,38,39,],[18,18,18,18,18,18,18,18,18,18,18,]),'NUMBER':([11,12,13,16,17,22,25,26,27,30,31,33,34,38,39,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'POINT':([15,18,19,20,21,28,29,36,37,40,41,42,],[25,-13,-16,-19,-20,38,39,-14,-15,-17,-18,-21,]),'CONDITIONAL':([18,19,20,21,23,24,36,37,40,41,42,],[-13,-16,-19,-20,33,34,-14,-15,-17,-18,-21,]),'RPAREN':([18,19,20,21,32,36,37,40,41,42,43,44,],[-13,-16,-19,-20,42,-14,-15,-17,-18,-21,47,48,]),'TIMES':([19,20,21,36,37,40,41,42,],[30,-19,-20,30,30,-17,-18,-21,]),'DIVIDE':([19,20,21,36,37,40,41,42,],[31,-19,-20,31,31,-17,-18,-21,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,1,10,],[1,10,10,]),'assign':([0,1,10,],[2,2,2,]),'if':([0,1,10,],[3,3,3,]),'elif':([0,1,10,],[4,4,4,]),'else':([0,1,10,],[5,5,5,]),'expression':([11,12,13,16,17,22,25,33,34,38,39,],[15,23,24,28,29,32,35,43,44,45,46,]),'term':([11,12,13,16,17,22,25,26,27,33,34,38,39,],[19,19,19,19,19,19,19,36,37,19,19,19,19,]),'factor':([11,12,13,16,17,22,25,26,27,30,31,33,34,38,39,],[20,20,20,20,20,20,20,20,20,40,41,20,20,20,20,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> assign','statement',1,'p_statement','if_yacc.py',5),
  ('statement -> statement statement','statement',2,'p_statement','if_yacc.py',6),
  ('statement -> if','statement',1,'p_statement','if_yacc.py',7),
  ('statement -> elif','statement',1,'p_statement','if_yacc.py',8),
  ('statement -> else','statement',1,'p_statement','if_yacc.py',9),
  ('assign -> ID EQUAL expression','assign',3,'p_assign','if_yacc.py',22),
  ('assign -> ID EQUAL expression POINT expression','assign',5,'p_assign','if_yacc.py',23),
  ('assign -> ID EQUAL MINUS expression POINT expression','assign',6,'p_assign','if_yacc.py',24),
  ('assign -> ID EQUAL PLUS expression POINT expression','assign',6,'p_assign','if_yacc.py',25),
  ('if -> IF LPAREN expression CONDITIONAL expression RPAREN COLON','if',7,'p_if','if_yacc.py',30),
  ('elif -> ELIF LPAREN expression CONDITIONAL expression RPAREN COLON','elif',7,'p_elif','if_yacc.py',33),
  ('else -> ELSE COLON','else',2,'p_else','if_yacc.py',36),
  ('expression -> STRING','expression',1,'p_string','if_yacc.py',39),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','if_yacc.py',42),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','if_yacc.py',46),
  ('expression -> term','expression',1,'p_expression_term','if_yacc.py',50),
  ('term -> term TIMES factor','term',3,'p_term_times','if_yacc.py',54),
  ('term -> term DIVIDE factor','term',3,'p_term_div','if_yacc.py',58),
  ('term -> factor','term',1,'p_term_factor','if_yacc.py',62),
  ('factor -> NUMBER','factor',1,'p_factor_num','if_yacc.py',66),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr','if_yacc.py',70),
]
