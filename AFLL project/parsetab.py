
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COLON CONDITIONAL DIVIDE DOLLAR ELIF ELSE EQUAL ID IF LPAREN MINUS NUMBER PLUS POINT RPAREN SEMICOLON STRING THEN TIMES WHILEstatement : assign\n    statement : statement statement\n    statement : if\n    statement : elif\n    statement : elseassign : ID EQUAL expression \n    | ID EQUAL MINUS expression POINT expression\n    | ID EQUAL PLUS expression POINT expressionif : IF LPAREN expression CONDITIONAL expression RPAREN COLONelif : ELIF LPAREN expression CONDITIONAL expression RPAREN COLONelse : ELSE COLONexpression : STRINGexpression : IDexpression : expression PLUS termexpression : expression MINUS termexpression : termterm : term TIMES factorterm : term DIVIDE factorterm : factorfactor : NUMBERfactor : LPAREN expression RPAREN'
    
_lr_action_items = {'ID':([0,1,2,3,4,5,10,11,12,13,14,15,16,17,18,19,20,21,22,23,33,34,35,36,37,38,39,40,41,44,45,48,49,],[6,6,-1,-3,-4,-5,6,15,15,15,-11,-13,-6,15,15,-12,-16,-19,-20,15,15,15,-14,-15,15,15,-17,-18,-21,-7,-8,-9,-10,]),'IF':([0,1,2,3,4,5,10,14,15,16,19,20,21,22,35,36,39,40,41,44,45,48,49,],[7,7,-1,-3,-4,-5,7,-11,-13,-6,-12,-16,-19,-20,-14,-15,-17,-18,-21,-7,-8,-9,-10,]),'ELIF':([0,1,2,3,4,5,10,14,15,16,19,20,21,22,35,36,39,40,41,44,45,48,49,],[8,8,-1,-3,-4,-5,8,-11,-13,-6,-12,-16,-19,-20,-14,-15,-17,-18,-21,-7,-8,-9,-10,]),'ELSE':([0,1,2,3,4,5,10,14,15,16,19,20,21,22,35,36,39,40,41,44,45,48,49,],[9,9,-1,-3,-4,-5,9,-11,-13,-6,-12,-16,-19,-20,-14,-15,-17,-18,-21,-7,-8,-9,-10,]),'$end':([1,2,3,4,5,10,14,15,16,19,20,21,22,35,36,39,40,41,44,45,48,49,],[0,-1,-3,-4,-5,-2,-11,-13,-6,-12,-16,-19,-20,-14,-15,-17,-18,-21,-7,-8,-9,-10,]),'EQUAL':([6,],[11,]),'LPAREN':([7,8,11,12,13,17,18,23,26,27,30,31,33,34,37,38,],[12,13,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'COLON':([9,46,47,],[14,48,49,]),'MINUS':([11,15,16,19,20,21,22,24,25,28,29,32,35,36,39,40,41,42,43,44,45,],[17,-13,27,-12,-16,-19,-20,27,27,27,27,27,-14,-15,-17,-18,-21,27,27,27,27,]),'PLUS':([11,15,16,19,20,21,22,24,25,28,29,32,35,36,39,40,41,42,43,44,45,],[18,-13,26,-12,-16,-19,-20,26,26,26,26,26,-14,-15,-17,-18,-21,26,26,26,26,]),'STRING':([11,12,13,17,18,23,33,34,37,38,],[19,19,19,19,19,19,19,19,19,19,]),'NUMBER':([11,12,13,17,18,23,26,27,30,31,33,34,37,38,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'CONDITIONAL':([15,19,20,21,22,24,25,35,36,39,40,41,],[-13,-12,-16,-19,-20,33,34,-14,-15,-17,-18,-21,]),'POINT':([15,19,20,21,22,28,29,35,36,39,40,41,],[-13,-12,-16,-19,-20,37,38,-14,-15,-17,-18,-21,]),'RPAREN':([15,19,20,21,22,32,35,36,39,40,41,42,43,],[-13,-12,-16,-19,-20,41,-14,-15,-17,-18,-21,46,47,]),'TIMES':([20,21,22,35,36,39,40,41,],[30,-19,-20,30,30,-17,-18,-21,]),'DIVIDE':([20,21,22,35,36,39,40,41,],[31,-19,-20,31,31,-17,-18,-21,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,1,10,],[1,10,10,]),'assign':([0,1,10,],[2,2,2,]),'if':([0,1,10,],[3,3,3,]),'elif':([0,1,10,],[4,4,4,]),'else':([0,1,10,],[5,5,5,]),'expression':([11,12,13,17,18,23,33,34,37,38,],[16,24,25,28,29,32,42,43,44,45,]),'term':([11,12,13,17,18,23,26,27,33,34,37,38,],[20,20,20,20,20,20,35,36,20,20,20,20,]),'factor':([11,12,13,17,18,23,26,27,30,31,33,34,37,38,],[21,21,21,21,21,21,21,21,39,40,21,21,21,21,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> assign','statement',1,'p_statement','if_yacc.py',5),
  ('statement -> statement statement','statement',2,'p_statement','if_yacc.py',6),
  ('statement -> if','statement',1,'p_statement','if_yacc.py',7),
  ('statement -> elif','statement',1,'p_statement','if_yacc.py',8),
  ('statement -> else','statement',1,'p_statement','if_yacc.py',9),
  ('assign -> ID EQUAL expression','assign',3,'p_assign','if_yacc.py',14),
  ('assign -> ID EQUAL MINUS expression POINT expression','assign',6,'p_assign','if_yacc.py',15),
  ('assign -> ID EQUAL PLUS expression POINT expression','assign',6,'p_assign','if_yacc.py',16),
  ('if -> IF LPAREN expression CONDITIONAL expression RPAREN COLON','if',7,'p_if','if_yacc.py',21),
  ('elif -> ELIF LPAREN expression CONDITIONAL expression RPAREN COLON','elif',7,'p_elif','if_yacc.py',24),
  ('else -> ELSE COLON','else',2,'p_else','if_yacc.py',27),
  ('expression -> STRING','expression',1,'p_string','if_yacc.py',30),
  ('expression -> ID','expression',1,'p_id','if_yacc.py',33),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','if_yacc.py',36),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','if_yacc.py',40),
  ('expression -> term','expression',1,'p_expression_term','if_yacc.py',44),
  ('term -> term TIMES factor','term',3,'p_term_times','if_yacc.py',48),
  ('term -> term DIVIDE factor','term',3,'p_term_div','if_yacc.py',52),
  ('term -> factor','term',1,'p_term_factor','if_yacc.py',56),
  ('factor -> NUMBER','factor',1,'p_factor_num','if_yacc.py',60),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr','if_yacc.py',64),
]
