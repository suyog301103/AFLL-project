Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DOLLAR
    SEMICOLON
    THEN
    WHILE

Grammar

Rule 0     S' -> statement
Rule 1     statement -> assign
Rule 2     statement -> statement statement
Rule 3     statement -> if
Rule 4     statement -> elif
Rule 5     statement -> else
Rule 6     assign -> ID EQUAL expression
Rule 7     assign -> ID EQUAL expression POINT expression
Rule 8     assign -> ID EQUAL MINUS expression POINT expression
Rule 9     assign -> ID EQUAL PLUS expression POINT expression
Rule 10    if -> IF LPAREN expression CONDITIONAL expression RPAREN COLON
Rule 11    elif -> ELIF LPAREN expression CONDITIONAL expression RPAREN COLON
Rule 12    else -> ELSE COLON
Rule 13    expression -> STRING
Rule 14    expression -> expression PLUS term
Rule 15    expression -> expression MINUS term
Rule 16    expression -> term
Rule 17    term -> term TIMES factor
Rule 18    term -> term DIVIDE factor
Rule 19    term -> factor
Rule 20    factor -> NUMBER
Rule 21    factor -> LPAREN expression RPAREN

Terminals, with rules where they appear

COLON                : 10 11 12
CONDITIONAL          : 10 11
DIVIDE               : 18
DOLLAR               : 
ELIF                 : 11
ELSE                 : 12
EQUAL                : 6 7 8 9
ID                   : 6 7 8 9
IF                   : 10
LPAREN               : 10 11 21
MINUS                : 8 15
NUMBER               : 20
PLUS                 : 9 14
POINT                : 7 8 9
RPAREN               : 10 11 21
SEMICOLON            : 
STRING               : 13
THEN                 : 
TIMES                : 17
WHILE                : 
error                : 

Nonterminals, with rules where they appear

assign               : 1
elif                 : 4
else                 : 5
expression           : 6 7 7 8 8 9 9 10 10 11 11 14 15 21
factor               : 17 18 19
if                   : 3
statement            : 2 2 0
term                 : 14 15 16 17 18

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . assign
    (2) statement -> . statement statement
    (3) statement -> . if
    (4) statement -> . elif
    (5) statement -> . else
    (6) assign -> . ID EQUAL expression
    (7) assign -> . ID EQUAL expression POINT expression
    (8) assign -> . ID EQUAL MINUS expression POINT expression
    (9) assign -> . ID EQUAL PLUS expression POINT expression
    (10) if -> . IF LPAREN expression CONDITIONAL expression RPAREN COLON
    (11) elif -> . ELIF LPAREN expression CONDITIONAL expression RPAREN COLON
    (12) else -> . ELSE COLON

    ID              shift and go to state 6
    IF              shift and go to state 7
    ELIF            shift and go to state 8
    ELSE            shift and go to state 9

    statement                      shift and go to state 1
    assign                         shift and go to state 2
    if                             shift and go to state 3
    elif                           shift and go to state 4
    else                           shift and go to state 5

state 1

    (0) S' -> statement .
    (2) statement -> statement . statement
    (1) statement -> . assign
    (2) statement -> . statement statement
    (3) statement -> . if
    (4) statement -> . elif
    (5) statement -> . else
    (6) assign -> . ID EQUAL expression
    (7) assign -> . ID EQUAL expression POINT expression
    (8) assign -> . ID EQUAL MINUS expression POINT expression
    (9) assign -> . ID EQUAL PLUS expression POINT expression
    (10) if -> . IF LPAREN expression CONDITIONAL expression RPAREN COLON
    (11) elif -> . ELIF LPAREN expression CONDITIONAL expression RPAREN COLON
    (12) else -> . ELSE COLON

    ID              shift and go to state 6
    IF              shift and go to state 7
    ELIF            shift and go to state 8
    ELSE            shift and go to state 9

    statement                      shift and go to state 10
    assign                         shift and go to state 2
    if                             shift and go to state 3
    elif                           shift and go to state 4
    else                           shift and go to state 5

state 2

    (1) statement -> assign .

    ID              reduce using rule 1 (statement -> assign .)
    IF              reduce using rule 1 (statement -> assign .)
    ELIF            reduce using rule 1 (statement -> assign .)
    ELSE            reduce using rule 1 (statement -> assign .)
    $end            reduce using rule 1 (statement -> assign .)


state 3

    (3) statement -> if .

    ID              reduce using rule 3 (statement -> if .)
    IF              reduce using rule 3 (statement -> if .)
    ELIF            reduce using rule 3 (statement -> if .)
    ELSE            reduce using rule 3 (statement -> if .)
    $end            reduce using rule 3 (statement -> if .)


state 4

    (4) statement -> elif .

    ID              reduce using rule 4 (statement -> elif .)
    IF              reduce using rule 4 (statement -> elif .)
    ELIF            reduce using rule 4 (statement -> elif .)
    ELSE            reduce using rule 4 (statement -> elif .)
    $end            reduce using rule 4 (statement -> elif .)


state 5

    (5) statement -> else .

    ID              reduce using rule 5 (statement -> else .)
    IF              reduce using rule 5 (statement -> else .)
    ELIF            reduce using rule 5 (statement -> else .)
    ELSE            reduce using rule 5 (statement -> else .)
    $end            reduce using rule 5 (statement -> else .)


state 6

    (6) assign -> ID . EQUAL expression
    (7) assign -> ID . EQUAL expression POINT expression
    (8) assign -> ID . EQUAL MINUS expression POINT expression
    (9) assign -> ID . EQUAL PLUS expression POINT expression

    EQUAL           shift and go to state 11


state 7

    (10) if -> IF . LPAREN expression CONDITIONAL expression RPAREN COLON

    LPAREN          shift and go to state 12


state 8

    (11) elif -> ELIF . LPAREN expression CONDITIONAL expression RPAREN COLON

    LPAREN          shift and go to state 13


state 9

    (12) else -> ELSE . COLON

    COLON           shift and go to state 14


state 10

    (2) statement -> statement statement .
    (2) statement -> statement . statement
    (1) statement -> . assign
    (2) statement -> . statement statement
    (3) statement -> . if
    (4) statement -> . elif
    (5) statement -> . else
    (6) assign -> . ID EQUAL expression
    (7) assign -> . ID EQUAL expression POINT expression
    (8) assign -> . ID EQUAL MINUS expression POINT expression
    (9) assign -> . ID EQUAL PLUS expression POINT expression
    (10) if -> . IF LPAREN expression CONDITIONAL expression RPAREN COLON
    (11) elif -> . ELIF LPAREN expression CONDITIONAL expression RPAREN COLON
    (12) else -> . ELSE COLON

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
    $end            reduce using rule 2 (statement -> statement statement .)
    ID              shift and go to state 6
    IF              shift and go to state 7
    ELIF            shift and go to state 8
    ELSE            shift and go to state 9

  ! ID              [ reduce using rule 2 (statement -> statement statement .) ]
  ! IF              [ reduce using rule 2 (statement -> statement statement .) ]
  ! ELIF            [ reduce using rule 2 (statement -> statement statement .) ]
  ! ELSE            [ reduce using rule 2 (statement -> statement statement .) ]

    statement                      shift and go to state 10
    assign                         shift and go to state 2
    if                             shift and go to state 3
    elif                           shift and go to state 4
    else                           shift and go to state 5

state 11

    (6) assign -> ID EQUAL . expression
    (7) assign -> ID EQUAL . expression POINT expression
    (8) assign -> ID EQUAL . MINUS expression POINT expression
    (9) assign -> ID EQUAL . PLUS expression POINT expression
    (13) expression -> . STRING
    (14) expression -> . expression PLUS term
    (15) expression -> . expression MINUS term
    (16) expression -> . term
    (17) term -> . term TIMES factor
    (18) term -> . term DIVIDE factor
    (19) term -> . factor
    (20) factor -> . NUMBER
    (21) factor -> . LPAREN expression RPAREN

    MINUS           shift and go to state 16
    PLUS            shift and go to state 17
    STRING          shift and go to state 18
    NUMBER          shift and go to state 21
    LPAREN          shift and go to state 22

    expression                     shift and go to state 15
    term                           shift and go to state 19
    factor                         shift and go to state 20

state 12

    (10) if -> IF LPAREN . expression CONDITIONAL expression RPAREN COLON
    (13) expression -> . STRING
    (14) expression -> . expression PLUS term
    (15) expression -> . expression MINUS term
    (16) expression -> . term
    (17) term -> . term TIMES factor
    (18) term -> . term DIVIDE factor
    (19) term -> . factor
    (20) factor -> . NUMBER
    (21) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 18
    NUMBER          shift and go to state 21
    LPAREN          shift and go to state 22

    expression                     shift and go to state 23
    term                           shift and go to state 19
    factor                         shift and go to state 20

state 13

    (11) elif -> ELIF LPAREN . expression CONDITIONAL expression RPAREN COLON
    (13) expression -> . STRING
    (14) expression -> . expression PLUS term
    (15) expression -> . expression MINUS term
    (16) expression -> . term
    (17) term -> . term TIMES factor
    (18) term -> . term DIVIDE factor
    (19) term -> . factor
    (20) factor -> . NUMBER
    (21) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 18
    NUMBER          shift and go to state 21
    LPAREN          shift and go to state 22

    expression                     shift and go to state 24
    term                           shift and go to state 19
    factor                         shift and go to state 20

state 14

    (12) else -> ELSE COLON .

    ID              reduce using rule 12 (else -> ELSE COLON .)
    IF              reduce using rule 12 (else -> ELSE COLON .)
    ELIF            reduce using rule 12 (else -> ELSE COLON .)
    ELSE            reduce using rule 12 (else -> ELSE COLON .)
    $end            reduce using rule 12 (else -> ELSE COLON .)


state 15

    (6) assign -> ID EQUAL expression .
    (7) assign -> ID EQUAL expression . POINT expression
    (14) expression -> expression . PLUS term
    (15) expression -> expression . MINUS term

    ID              reduce using rule 6 (assign -> ID EQUAL expression .)
    IF              reduce using rule 6 (assign -> ID EQUAL expression .)
    ELIF            reduce using rule 6 (assign -> ID EQUAL expression .)
    ELSE            reduce using rule 6 (assign -> ID EQUAL expression .)
    $end            reduce using rule 6 (assign -> ID EQUAL expression .)
    POINT           shift and go to state 25
    PLUS            shift and go to state 26
    MINUS           shift and go to state 27


state 16

    (8) assign -> ID EQUAL MINUS . expression POINT expression
    (13) expression -> . STRING
    (14) expression -> . expression PLUS term
    (15) expression -> . expression MINUS term
    (16) expression -> . term
    (17) term -> . term TIMES factor
    (18) term -> . term DIVIDE factor
    (19) term -> . factor
    (20) factor -> . NUMBER
    (21) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 18
    NUMBER          shift and go to state 21
    LPAREN          shift and go to state 22

    expression                     shift and go to state 28
    term                           shift and go to state 19
    factor                         shift and go to state 20

state 17

    (9) assign -> ID EQUAL PLUS . expression POINT expression
    (13) expression -> . STRING
    (14) expression -> . expression PLUS term
    (15) expression -> . expression MINUS term
    (16) expression -> . term
    (17) term -> . term TIMES factor
    (18) term -> . term DIVIDE factor
    (19) term -> . factor
    (20) factor -> . NUMBER
    (21) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 18
    NUMBER          shift and go to state 21
    LPAREN          shift and go to state 22

    expression                     shift and go to state 29
    term                           shift and go to state 19
    factor                         shift and go to state 20

state 18

    (13) expression -> STRING .

    POINT           reduce using rule 13 (expression -> STRING .)
    PLUS            reduce using rule 13 (expression -> STRING .)
    MINUS           reduce using rule 13 (expression -> STRING .)
    ID              reduce using rule 13 (expression -> STRING .)
    IF              reduce using rule 13 (expression -> STRING .)
    ELIF            reduce using rule 13 (expression -> STRING .)
    ELSE            reduce using rule 13 (expression -> STRING .)
    $end            reduce using rule 13 (expression -> STRING .)
    CONDITIONAL     reduce using rule 13 (expression -> STRING .)
    RPAREN          reduce using rule 13 (expression -> STRING .)


state 19

    (16) expression -> term .
    (17) term -> term . TIMES factor
    (18) term -> term . DIVIDE factor

    POINT           reduce using rule 16 (expression -> term .)
    PLUS            reduce using rule 16 (expression -> term .)
    MINUS           reduce using rule 16 (expression -> term .)
    ID              reduce using rule 16 (expression -> term .)
    IF              reduce using rule 16 (expression -> term .)
    ELIF            reduce using rule 16 (expression -> term .)
    ELSE            reduce using rule 16 (expression -> term .)
    $end            reduce using rule 16 (expression -> term .)
    CONDITIONAL     reduce using rule 16 (expression -> term .)
    RPAREN          reduce using rule 16 (expression -> term .)
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31


state 20

    (19) term -> factor .

    TIMES           reduce using rule 19 (term -> factor .)
    DIVIDE          reduce using rule 19 (term -> factor .)
    POINT           reduce using rule 19 (term -> factor .)
    PLUS            reduce using rule 19 (term -> factor .)
    MINUS           reduce using rule 19 (term -> factor .)
    ID              reduce using rule 19 (term -> factor .)
    IF              reduce using rule 19 (term -> factor .)
    ELIF            reduce using rule 19 (term -> factor .)
    ELSE            reduce using rule 19 (term -> factor .)
    $end            reduce using rule 19 (term -> factor .)
    CONDITIONAL     reduce using rule 19 (term -> factor .)
    RPAREN          reduce using rule 19 (term -> factor .)


state 21

    (20) factor -> NUMBER .

    TIMES           reduce using rule 20 (factor -> NUMBER .)
    DIVIDE          reduce using rule 20 (factor -> NUMBER .)
    POINT           reduce using rule 20 (factor -> NUMBER .)
    PLUS            reduce using rule 20 (factor -> NUMBER .)
    MINUS           reduce using rule 20 (factor -> NUMBER .)
    ID              reduce using rule 20 (factor -> NUMBER .)
    IF              reduce using rule 20 (factor -> NUMBER .)
    ELIF            reduce using rule 20 (factor -> NUMBER .)
    ELSE            reduce using rule 20 (factor -> NUMBER .)
    $end            reduce using rule 20 (factor -> NUMBER .)
    CONDITIONAL     reduce using rule 20 (factor -> NUMBER .)
    RPAREN          reduce using rule 20 (factor -> NUMBER .)


state 22

    (21) factor -> LPAREN . expression RPAREN
    (13) expression -> . STRING
    (14) expression -> . expression PLUS term
    (15) expression -> . expression MINUS term
    (16) expression -> . term
    (17) term -> . term TIMES factor
    (18) term -> . term DIVIDE factor
    (19) term -> . factor
    (20) factor -> . NUMBER
    (21) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 18
    NUMBER          shift and go to state 21
    LPAREN          shift and go to state 22

    expression                     shift and go to state 32
    term                           shift and go to state 19
    factor                         shift and go to state 20

state 23

    (10) if -> IF LPAREN expression . CONDITIONAL expression RPAREN COLON
    (14) expression -> expression . PLUS term
    (15) expression -> expression . MINUS term

    CONDITIONAL     shift and go to state 33
    PLUS            shift and go to state 26
    MINUS           shift and go to state 27


state 24

    (11) elif -> ELIF LPAREN expression . CONDITIONAL expression RPAREN COLON
    (14) expression -> expression . PLUS term
    (15) expression -> expression . MINUS term

    CONDITIONAL     shift and go to state 34
    PLUS            shift and go to state 26
    MINUS           shift and go to state 27


state 25

    (7) assign -> ID EQUAL expression POINT . expression
    (13) expression -> . STRING
    (14) expression -> . expression PLUS term
    (15) expression -> . expression MINUS term
    (16) expression -> . term
    (17) term -> . term TIMES factor
    (18) term -> . term DIVIDE factor
    (19) term -> . factor
    (20) factor -> . NUMBER
    (21) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 18
    NUMBER          shift and go to state 21
    LPAREN          shift and go to state 22

    expression                     shift and go to state 35
    term                           shift and go to state 19
    factor                         shift and go to state 20

state 26

    (14) expression -> expression PLUS . term
    (17) term -> . term TIMES factor
    (18) term -> . term DIVIDE factor
    (19) term -> . factor
    (20) factor -> . NUMBER
    (21) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 21
    LPAREN          shift and go to state 22

    term                           shift and go to state 36
    factor                         shift and go to state 20

state 27

    (15) expression -> expression MINUS . term
    (17) term -> . term TIMES factor
    (18) term -> . term DIVIDE factor
    (19) term -> . factor
    (20) factor -> . NUMBER
    (21) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 21
    LPAREN          shift and go to state 22

    term                           shift and go to state 37
    factor                         shift and go to state 20

state 28

    (8) assign -> ID EQUAL MINUS expression . POINT expression
    (14) expression -> expression . PLUS term
    (15) expression -> expression . MINUS term

    POINT           shift and go to state 38
    PLUS            shift and go to state 26
    MINUS           shift and go to state 27


state 29

    (9) assign -> ID EQUAL PLUS expression . POINT expression
    (14) expression -> expression . PLUS term
    (15) expression -> expression . MINUS term

    POINT           shift and go to state 39
    PLUS            shift and go to state 26
    MINUS           shift and go to state 27


state 30

    (17) term -> term TIMES . factor
    (20) factor -> . NUMBER
    (21) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 21
    LPAREN          shift and go to state 22

    factor                         shift and go to state 40

state 31

    (18) term -> term DIVIDE . factor
    (20) factor -> . NUMBER
    (21) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 21
    LPAREN          shift and go to state 22

    factor                         shift and go to state 41

state 32

    (21) factor -> LPAREN expression . RPAREN
    (14) expression -> expression . PLUS term
    (15) expression -> expression . MINUS term

    RPAREN          shift and go to state 42
    PLUS            shift and go to state 26
    MINUS           shift and go to state 27


state 33

    (10) if -> IF LPAREN expression CONDITIONAL . expression RPAREN COLON
    (13) expression -> . STRING
    (14) expression -> . expression PLUS term
    (15) expression -> . expression MINUS term
    (16) expression -> . term
    (17) term -> . term TIMES factor
    (18) term -> . term DIVIDE factor
    (19) term -> . factor
    (20) factor -> . NUMBER
    (21) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 18
    NUMBER          shift and go to state 21
    LPAREN          shift and go to state 22

    expression                     shift and go to state 43
    term                           shift and go to state 19
    factor                         shift and go to state 20

state 34

    (11) elif -> ELIF LPAREN expression CONDITIONAL . expression RPAREN COLON
    (13) expression -> . STRING
    (14) expression -> . expression PLUS term
    (15) expression -> . expression MINUS term
    (16) expression -> . term
    (17) term -> . term TIMES factor
    (18) term -> . term DIVIDE factor
    (19) term -> . factor
    (20) factor -> . NUMBER
    (21) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 18
    NUMBER          shift and go to state 21
    LPAREN          shift and go to state 22

    expression                     shift and go to state 44
    term                           shift and go to state 19
    factor                         shift and go to state 20

state 35

    (7) assign -> ID EQUAL expression POINT expression .
    (14) expression -> expression . PLUS term
    (15) expression -> expression . MINUS term

    ID              reduce using rule 7 (assign -> ID EQUAL expression POINT expression .)
    IF              reduce using rule 7 (assign -> ID EQUAL expression POINT expression .)
    ELIF            reduce using rule 7 (assign -> ID EQUAL expression POINT expression .)
    ELSE            reduce using rule 7 (assign -> ID EQUAL expression POINT expression .)
    $end            reduce using rule 7 (assign -> ID EQUAL expression POINT expression .)
    PLUS            shift and go to state 26
    MINUS           shift and go to state 27


state 36

    (14) expression -> expression PLUS term .
    (17) term -> term . TIMES factor
    (18) term -> term . DIVIDE factor

    POINT           reduce using rule 14 (expression -> expression PLUS term .)
    PLUS            reduce using rule 14 (expression -> expression PLUS term .)
    MINUS           reduce using rule 14 (expression -> expression PLUS term .)
    ID              reduce using rule 14 (expression -> expression PLUS term .)
    IF              reduce using rule 14 (expression -> expression PLUS term .)
    ELIF            reduce using rule 14 (expression -> expression PLUS term .)
    ELSE            reduce using rule 14 (expression -> expression PLUS term .)
    $end            reduce using rule 14 (expression -> expression PLUS term .)
    CONDITIONAL     reduce using rule 14 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 14 (expression -> expression PLUS term .)
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31


state 37

    (15) expression -> expression MINUS term .
    (17) term -> term . TIMES factor
    (18) term -> term . DIVIDE factor

    POINT           reduce using rule 15 (expression -> expression MINUS term .)
    PLUS            reduce using rule 15 (expression -> expression MINUS term .)
    MINUS           reduce using rule 15 (expression -> expression MINUS term .)
    ID              reduce using rule 15 (expression -> expression MINUS term .)
    IF              reduce using rule 15 (expression -> expression MINUS term .)
    ELIF            reduce using rule 15 (expression -> expression MINUS term .)
    ELSE            reduce using rule 15 (expression -> expression MINUS term .)
    $end            reduce using rule 15 (expression -> expression MINUS term .)
    CONDITIONAL     reduce using rule 15 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 15 (expression -> expression MINUS term .)
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31


state 38

    (8) assign -> ID EQUAL MINUS expression POINT . expression
    (13) expression -> . STRING
    (14) expression -> . expression PLUS term
    (15) expression -> . expression MINUS term
    (16) expression -> . term
    (17) term -> . term TIMES factor
    (18) term -> . term DIVIDE factor
    (19) term -> . factor
    (20) factor -> . NUMBER
    (21) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 18
    NUMBER          shift and go to state 21
    LPAREN          shift and go to state 22

    expression                     shift and go to state 45
    term                           shift and go to state 19
    factor                         shift and go to state 20

state 39

    (9) assign -> ID EQUAL PLUS expression POINT . expression
    (13) expression -> . STRING
    (14) expression -> . expression PLUS term
    (15) expression -> . expression MINUS term
    (16) expression -> . term
    (17) term -> . term TIMES factor
    (18) term -> . term DIVIDE factor
    (19) term -> . factor
    (20) factor -> . NUMBER
    (21) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 18
    NUMBER          shift and go to state 21
    LPAREN          shift and go to state 22

    expression                     shift and go to state 46
    term                           shift and go to state 19
    factor                         shift and go to state 20

state 40

    (17) term -> term TIMES factor .

    TIMES           reduce using rule 17 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 17 (term -> term TIMES factor .)
    POINT           reduce using rule 17 (term -> term TIMES factor .)
    PLUS            reduce using rule 17 (term -> term TIMES factor .)
    MINUS           reduce using rule 17 (term -> term TIMES factor .)
    ID              reduce using rule 17 (term -> term TIMES factor .)
    IF              reduce using rule 17 (term -> term TIMES factor .)
    ELIF            reduce using rule 17 (term -> term TIMES factor .)
    ELSE            reduce using rule 17 (term -> term TIMES factor .)
    $end            reduce using rule 17 (term -> term TIMES factor .)
    CONDITIONAL     reduce using rule 17 (term -> term TIMES factor .)
    RPAREN          reduce using rule 17 (term -> term TIMES factor .)


state 41

    (18) term -> term DIVIDE factor .

    TIMES           reduce using rule 18 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 18 (term -> term DIVIDE factor .)
    POINT           reduce using rule 18 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 18 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 18 (term -> term DIVIDE factor .)
    ID              reduce using rule 18 (term -> term DIVIDE factor .)
    IF              reduce using rule 18 (term -> term DIVIDE factor .)
    ELIF            reduce using rule 18 (term -> term DIVIDE factor .)
    ELSE            reduce using rule 18 (term -> term DIVIDE factor .)
    $end            reduce using rule 18 (term -> term DIVIDE factor .)
    CONDITIONAL     reduce using rule 18 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 18 (term -> term DIVIDE factor .)


state 42

    (21) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 21 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 21 (factor -> LPAREN expression RPAREN .)
    POINT           reduce using rule 21 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 21 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 21 (factor -> LPAREN expression RPAREN .)
    ID              reduce using rule 21 (factor -> LPAREN expression RPAREN .)
    IF              reduce using rule 21 (factor -> LPAREN expression RPAREN .)
    ELIF            reduce using rule 21 (factor -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 21 (factor -> LPAREN expression RPAREN .)
    $end            reduce using rule 21 (factor -> LPAREN expression RPAREN .)
    CONDITIONAL     reduce using rule 21 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 21 (factor -> LPAREN expression RPAREN .)


state 43

    (10) if -> IF LPAREN expression CONDITIONAL expression . RPAREN COLON
    (14) expression -> expression . PLUS term
    (15) expression -> expression . MINUS term

    RPAREN          shift and go to state 47
    PLUS            shift and go to state 26
    MINUS           shift and go to state 27


state 44

    (11) elif -> ELIF LPAREN expression CONDITIONAL expression . RPAREN COLON
    (14) expression -> expression . PLUS term
    (15) expression -> expression . MINUS term

    RPAREN          shift and go to state 48
    PLUS            shift and go to state 26
    MINUS           shift and go to state 27


state 45

    (8) assign -> ID EQUAL MINUS expression POINT expression .
    (14) expression -> expression . PLUS term
    (15) expression -> expression . MINUS term

    ID              reduce using rule 8 (assign -> ID EQUAL MINUS expression POINT expression .)
    IF              reduce using rule 8 (assign -> ID EQUAL MINUS expression POINT expression .)
    ELIF            reduce using rule 8 (assign -> ID EQUAL MINUS expression POINT expression .)
    ELSE            reduce using rule 8 (assign -> ID EQUAL MINUS expression POINT expression .)
    $end            reduce using rule 8 (assign -> ID EQUAL MINUS expression POINT expression .)
    PLUS            shift and go to state 26
    MINUS           shift and go to state 27


state 46

    (9) assign -> ID EQUAL PLUS expression POINT expression .
    (14) expression -> expression . PLUS term
    (15) expression -> expression . MINUS term

    ID              reduce using rule 9 (assign -> ID EQUAL PLUS expression POINT expression .)
    IF              reduce using rule 9 (assign -> ID EQUAL PLUS expression POINT expression .)
    ELIF            reduce using rule 9 (assign -> ID EQUAL PLUS expression POINT expression .)
    ELSE            reduce using rule 9 (assign -> ID EQUAL PLUS expression POINT expression .)
    $end            reduce using rule 9 (assign -> ID EQUAL PLUS expression POINT expression .)
    PLUS            shift and go to state 26
    MINUS           shift and go to state 27


state 47

    (10) if -> IF LPAREN expression CONDITIONAL expression RPAREN . COLON

    COLON           shift and go to state 49


state 48

    (11) elif -> ELIF LPAREN expression CONDITIONAL expression RPAREN . COLON

    COLON           shift and go to state 50


state 49

    (10) if -> IF LPAREN expression CONDITIONAL expression RPAREN COLON .

    ID              reduce using rule 10 (if -> IF LPAREN expression CONDITIONAL expression RPAREN COLON .)
    IF              reduce using rule 10 (if -> IF LPAREN expression CONDITIONAL expression RPAREN COLON .)
    ELIF            reduce using rule 10 (if -> IF LPAREN expression CONDITIONAL expression RPAREN COLON .)
    ELSE            reduce using rule 10 (if -> IF LPAREN expression CONDITIONAL expression RPAREN COLON .)
    $end            reduce using rule 10 (if -> IF LPAREN expression CONDITIONAL expression RPAREN COLON .)


state 50

    (11) elif -> ELIF LPAREN expression CONDITIONAL expression RPAREN COLON .

    ID              reduce using rule 11 (elif -> ELIF LPAREN expression CONDITIONAL expression RPAREN COLON .)
    IF              reduce using rule 11 (elif -> ELIF LPAREN expression CONDITIONAL expression RPAREN COLON .)
    ELIF            reduce using rule 11 (elif -> ELIF LPAREN expression CONDITIONAL expression RPAREN COLON .)
    ELSE            reduce using rule 11 (elif -> ELIF LPAREN expression CONDITIONAL expression RPAREN COLON .)
    $end            reduce using rule 11 (elif -> ELIF LPAREN expression CONDITIONAL expression RPAREN COLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 10 resolved as shift
WARNING: shift/reduce conflict for IF in state 10 resolved as shift
WARNING: shift/reduce conflict for ELIF in state 10 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 10 resolved as shift
